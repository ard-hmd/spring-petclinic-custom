apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mysql-statefulset
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: mysql
      app.kubernetes.io/name: mysql
  serviceName: {{ .Release.Name }}-mysql-service
  replicas: {{ .Values.mysql.replicaCount }}
  template:
    metadata:
      labels:
        app: mysql
        app.kubernetes.io/name: mysql
    spec:
      # Initialize containers before the main container starts
      initContainers:
      - name: init-mysql
        image: {{ .Values.mysql.image }}
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate MySQL server ID from the pod's ordinal index.
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved value server-id=0.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map

      # Clone MySQL data from the previous pod (if it exists)
      - name: clone-mysql
        image: {{ .Values.xtrabackup.image }}
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip cloning if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip cloning on primary pod (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from the previous pod.
          ncat --recv-only {{ .Release.Name }}-mysql-statefulset-$(($ordinal-1)).{{ .Release.Name }}-mysql-service 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d

      # Main MySQL container
      containers:
      - name: mysql
        image: mysql:5.7
        env:
          {{- range $envVar := .Values.mysql.envVars }}
          - name: {{ $envVar.name }}
            value: {{ $envVar.value | quote }}
          {{- end }}
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        # Availability probe to check MySQL container's state
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        # Readiness probe to check MySQL container's availability
        readinessProbe:
          exec:
            # Check if queries can be executed via TCP (skip-networking is disabled).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1

      # xtrabackup container for backup and replication
      - name: xtrabackup
        image: {{ .Values.xtrabackup.image }}
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Determine the binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
            # XtraBackup has already generated a partial "CHANGE MASTER TO" query
            # because we are cloning from an existing replica. (Must remove the trailing semicolon!)
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (not needed).
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We are cloning directly from the primary. Parse the binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to finish cloning by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld availability (accepting connections)"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            mysql -h 127.0.0.1 \
                  -e "$(<change_master_to.sql.in), \
                          MASTER_HOST='{{ .Release.Name }}-mysql-statefulset-0.{{ .Release.Name }}-mysql-service', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD='', \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE;" || exit 1
            mv change_master_to.sql.in change_master_to.sql.orig
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi

      # Definition of volumes used by the containers
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: {{ .Release.Name }}-mysql-configmap

  # Definition of volume claim templates for pods
  volumeClaimTemplates:
  - metadata:
      name: data
      namespace: {{ .Release.Namespace }}
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.mysql.storageSize }}
