apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-mysql-configmap
  namespace: {{ .Release.Namespace }}
  labels:
    app: mysql
    app.kubernetes.io/name: mysql
data:
  primary.cnf: |
    # Apply this config only on the primary.
    [mysqld]
    log-bin
  replica.cnf: |
    # Apply this config only on replicas.
    [mysqld]
    super-read-only

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-init-mysql-configmap
  namespace: {{ .Release.Namespace }}
  labels:
    app: mysql
    app.kubernetes.io/name: mysql
data:
  init-mysql.sh: |
    #!/bin/bash
    set -ex
    # Generate MySQL server ID from the pod's ordinal index.
    [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    echo [mysqld] > /mnt/conf.d/server-id.cnf
    # Add an offset to avoid reserved value server-id=0.
    echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
    # Copy appropriate conf.d files from config map to emptyDir.
    if [[ $ordinal -eq 0 ]]; then
      cp /mnt/config-map/primary.cnf /mnt/conf.d/
    else
      cp /mnt/config-map/replica.cnf /mnt/conf.d/
    fi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-clone-mysql-configmap
  namespace: {{ .Release.Namespace }}
  labels:
    app: mysql
    app.kubernetes.io/name: mysql
data:
  clone-mysql.sh: |
    #!/bin/bash
    set -ex
    # Skip cloning if data already exists.
    [[ -d /var/lib/mysql/mysql ]] && exit 0
    # Skip cloning on primary pod (ordinal index 0).
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    [[ $ordinal -eq 0 ]] && exit 0
    # Clone data from the previous pod.
    ncat --recv-only {{ .Release.Name }}-mysql-statefulset-$(($ordinal-1)).{{ .Release.Name }}-mysql-service 3307 | xbstream -x -C /var/lib/mysql
    # Prepare the backup.
    xtrabackup --prepare --target-dir=/var/lib/mysql

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-xtrabackup-mysql-configmap
  namespace: {{ .Release.Namespace }}
  labels:
    app: mysql
    app.kubernetes.io/name: mysql
data:
  xtrabackup-mysql.sh: |
    #!/bin/bash
    set -ex
    cd /var/lib/mysql

    # Determine the binlog position of cloned data, if any.
    if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
      # XtraBackup has already generated a partial "CHANGE MASTER TO" query
      # because we are cloning from an existing replica. (Must remove the trailing semicolon!)
      cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
      # Ignore xtrabackup_binlog_info in this case (not needed).
      rm -f xtrabackup_slave_info xtrabackup_binlog_info
    elif [[ -f xtrabackup_binlog_info ]]; then
      # We are cloning directly from the primary. Parse the binlog position.
      [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
      rm -f xtrabackup_binlog_info xtrabackup_slave_info
      echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
            MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
    fi

    # Check if we need to finish cloning by starting replication.
    if [[ -f change_master_to.sql.in ]]; then
      echo "Waiting for mysqld availability (accepting connections)"
      until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

      echo "Initializing replication from clone position"
      mysql -h 127.0.0.1 \
            -e "$(<change_master_to.sql.in), \
                    MASTER_HOST='{{ .Release.Name }}-mysql-statefulset-0.{{ .Release.Name }}-mysql-service', \
                    MASTER_USER='root', \
                    MASTER_PASSWORD='', \
                    MASTER_CONNECT_RETRY=10; \
                  START SLAVE;" || exit 1
      mv change_master_to.sql.in change_master_to.sql.orig
    fi

    # Start a server to send backups when requested by peers.
    exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
      "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"